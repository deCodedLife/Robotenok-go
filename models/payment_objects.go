// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PaymentObject is an object representing the database table.
type PaymentObject struct {
	ID     int    `form:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Name   string `form:"Name" boil:"Name" json:"Name" toml:"Name" yaml:"Name"`
	Active bool   `form:"Active" boil:"Active" json:"Active" toml:"Active" yaml:"Active"`

	R *paymentObjectR `form:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentObjectL  `form:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentObjectColumns = struct {
	ID     string
	Name   string
	Active string
}{
	ID:     "id",
	Name:   "Name",
	Active: "Active",
}

var PaymentObjectTableColumns = struct {
	ID     string
	Name   string
	Active string
}{
	ID:     "payment_objects.id",
	Name:   "payment_objects.Name",
	Active: "payment_objects.Active",
}

// Generated where

var PaymentObjectWhere = struct {
	ID     whereHelperint
	Name   whereHelperstring
	Active whereHelperbool
}{
	ID:     whereHelperint{field: "`payment_objects`.`id`"},
	Name:   whereHelperstring{field: "`payment_objects`.`Name`"},
	Active: whereHelperbool{field: "`payment_objects`.`Active`"},
}

// PaymentObjectRels is where relationship names are stored.
var PaymentObjectRels = struct {
	Costs string
}{
	Costs: "Costs",
}

// paymentObjectR is where relationships are stored.
type paymentObjectR struct {
	Costs CostSlice `form:"Costs" boil:"Costs" json:"Costs" toml:"Costs" yaml:"Costs"`
}

// NewStruct creates a new relationship struct
func (*paymentObjectR) NewStruct() *paymentObjectR {
	return &paymentObjectR{}
}

// paymentObjectL is where Load methods for each relationship are stored.
type paymentObjectL struct{}

var (
	paymentObjectAllColumns            = []string{"id", "Name", "Active"}
	paymentObjectColumnsWithoutDefault = []string{"Name"}
	paymentObjectColumnsWithDefault    = []string{"id", "Active"}
	paymentObjectPrimaryKeyColumns     = []string{"id"}
)

type (
	// PaymentObjectSlice is an alias for a slice of pointers to PaymentObject.
	// This should almost always be used instead of []PaymentObject.
	PaymentObjectSlice []*PaymentObject
	// PaymentObjectHook is the signature for custom PaymentObject hook methods
	PaymentObjectHook func(context.Context, boil.ContextExecutor, *PaymentObject) error

	paymentObjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentObjectType                 = reflect.TypeOf(&PaymentObject{})
	paymentObjectMapping              = queries.MakeStructMapping(paymentObjectType)
	paymentObjectPrimaryKeyMapping, _ = queries.BindMapping(paymentObjectType, paymentObjectMapping, paymentObjectPrimaryKeyColumns)
	paymentObjectInsertCacheMut       sync.RWMutex
	paymentObjectInsertCache          = make(map[string]insertCache)
	paymentObjectUpdateCacheMut       sync.RWMutex
	paymentObjectUpdateCache          = make(map[string]updateCache)
	paymentObjectUpsertCacheMut       sync.RWMutex
	paymentObjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentObjectBeforeInsertHooks []PaymentObjectHook
var paymentObjectBeforeUpdateHooks []PaymentObjectHook
var paymentObjectBeforeDeleteHooks []PaymentObjectHook
var paymentObjectBeforeUpsertHooks []PaymentObjectHook

var paymentObjectAfterInsertHooks []PaymentObjectHook
var paymentObjectAfterSelectHooks []PaymentObjectHook
var paymentObjectAfterUpdateHooks []PaymentObjectHook
var paymentObjectAfterDeleteHooks []PaymentObjectHook
var paymentObjectAfterUpsertHooks []PaymentObjectHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentObject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentObject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentObject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentObject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentObject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentObject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentObject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentObject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentObject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentObjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentObjectHook registers your hook function for all future operations.
func AddPaymentObjectHook(hookPoint boil.HookPoint, paymentObjectHook PaymentObjectHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentObjectBeforeInsertHooks = append(paymentObjectBeforeInsertHooks, paymentObjectHook)
	case boil.BeforeUpdateHook:
		paymentObjectBeforeUpdateHooks = append(paymentObjectBeforeUpdateHooks, paymentObjectHook)
	case boil.BeforeDeleteHook:
		paymentObjectBeforeDeleteHooks = append(paymentObjectBeforeDeleteHooks, paymentObjectHook)
	case boil.BeforeUpsertHook:
		paymentObjectBeforeUpsertHooks = append(paymentObjectBeforeUpsertHooks, paymentObjectHook)
	case boil.AfterInsertHook:
		paymentObjectAfterInsertHooks = append(paymentObjectAfterInsertHooks, paymentObjectHook)
	case boil.AfterSelectHook:
		paymentObjectAfterSelectHooks = append(paymentObjectAfterSelectHooks, paymentObjectHook)
	case boil.AfterUpdateHook:
		paymentObjectAfterUpdateHooks = append(paymentObjectAfterUpdateHooks, paymentObjectHook)
	case boil.AfterDeleteHook:
		paymentObjectAfterDeleteHooks = append(paymentObjectAfterDeleteHooks, paymentObjectHook)
	case boil.AfterUpsertHook:
		paymentObjectAfterUpsertHooks = append(paymentObjectAfterUpsertHooks, paymentObjectHook)
	}
}

// One returns a single paymentObject record from the query.
func (q paymentObjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentObject, error) {
	o := &PaymentObject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for payment_objects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentObject records from the query.
func (q paymentObjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentObjectSlice, error) {
	var o []*PaymentObject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentObject slice")
	}

	if len(paymentObjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentObject records in the query.
func (q paymentObjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count payment_objects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentObjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if payment_objects exists")
	}

	return count > 0, nil
}

// Costs retrieves all the cost's Costs with an executor.
func (o *PaymentObject) Costs(mods ...qm.QueryMod) costQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`costs`.`payment_object`=?", o.ID),
	)

	query := Costs(queryMods...)
	queries.SetFrom(query.Query, "`costs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`costs`.*"})
	}

	return query
}

// LoadCosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentObjectL) LoadCosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentObject interface{}, mods queries.Applicator) error {
	var slice []*PaymentObject
	var object *PaymentObject

	if singular {
		object = maybePaymentObject.(*PaymentObject)
	} else {
		slice = *maybePaymentObject.(*[]*PaymentObject)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentObjectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentObjectR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`costs`),
		qm.WhereIn(`costs.payment_object in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load costs")
	}

	var resultSlice []*Cost
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice costs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on costs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for costs")
	}

	if len(costAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Costs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &costR{}
			}
			foreign.R.CostPaymentObject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PaymentObject {
				local.R.Costs = append(local.R.Costs, foreign)
				if foreign.R == nil {
					foreign.R = &costR{}
				}
				foreign.R.CostPaymentObject = local
				break
			}
		}
	}

	return nil
}

// AddCosts adds the given related objects to the existing relationships
// of the payment_object, optionally inserting them as new records.
// Appends related to o.R.Costs.
// Sets related.R.CostPaymentObject appropriately.
func (o *PaymentObject) AddCosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cost) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentObject = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `costs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"payment_object"}),
				strmangle.WhereClause("`", "`", 0, costPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentObject = o.ID
		}
	}

	if o.R == nil {
		o.R = &paymentObjectR{
			Costs: related,
		}
	} else {
		o.R.Costs = append(o.R.Costs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &costR{
				CostPaymentObject: o,
			}
		} else {
			rel.R.CostPaymentObject = o
		}
	}
	return nil
}

// PaymentObjects retrieves all the records using an executor.
func PaymentObjects(mods ...qm.QueryMod) paymentObjectQuery {
	mods = append(mods, qm.From("`payment_objects`"))
	return paymentObjectQuery{NewQuery(mods...)}
}

// FindPaymentObject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentObject(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PaymentObject, error) {
	paymentObjectObj := &PaymentObject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `payment_objects` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentObjectObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from payment_objects")
	}

	if err = paymentObjectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentObjectObj, err
	}

	return paymentObjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentObject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_objects provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentObjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentObjectInsertCacheMut.RLock()
	cache, cached := paymentObjectInsertCache[key]
	paymentObjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentObjectAllColumns,
			paymentObjectColumnsWithDefault,
			paymentObjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentObjectType, paymentObjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentObjectType, paymentObjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `payment_objects` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `payment_objects` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `payment_objects` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentObjectPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into payment_objects")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentObjectMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for payment_objects")
	}

CacheNoHooks:
	if !cached {
		paymentObjectInsertCacheMut.Lock()
		paymentObjectInsertCache[key] = cache
		paymentObjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentObject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentObject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentObjectUpdateCacheMut.RLock()
	cache, cached := paymentObjectUpdateCache[key]
	paymentObjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentObjectAllColumns,
			paymentObjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update payment_objects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `payment_objects` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentObjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentObjectType, paymentObjectMapping, append(wl, paymentObjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update payment_objects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for payment_objects")
	}

	if !cached {
		paymentObjectUpdateCacheMut.Lock()
		paymentObjectUpdateCache[key] = cache
		paymentObjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentObjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for payment_objects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for payment_objects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentObjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentObjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `payment_objects` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentObjectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentObject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentObject")
	}
	return rowsAff, nil
}

var mySQLPaymentObjectUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentObject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_objects provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentObjectColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentObjectUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentObjectUpsertCacheMut.RLock()
	cache, cached := paymentObjectUpsertCache[key]
	paymentObjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentObjectAllColumns,
			paymentObjectColumnsWithDefault,
			paymentObjectColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentObjectAllColumns,
			paymentObjectPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert payment_objects, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`payment_objects`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `payment_objects` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentObjectType, paymentObjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentObjectType, paymentObjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for payment_objects")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentObjectMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentObjectType, paymentObjectMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for payment_objects")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for payment_objects")
	}

CacheNoHooks:
	if !cached {
		paymentObjectUpsertCacheMut.Lock()
		paymentObjectUpsertCache[key] = cache
		paymentObjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentObject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentObject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentObject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentObjectPrimaryKeyMapping)
	sql := "DELETE FROM `payment_objects` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from payment_objects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for payment_objects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentObjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentObjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payment_objects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_objects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentObjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentObjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentObjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `payment_objects` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentObjectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentObject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_objects")
	}

	if len(paymentObjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentObject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentObject(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentObjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentObjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentObjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `payment_objects`.* FROM `payment_objects` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentObjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentObjectSlice")
	}

	*o = slice

	return nil
}

// PaymentObjectExists checks if the PaymentObject row exists.
func PaymentObjectExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `payment_objects` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if payment_objects exists")
	}

	return exists, nil
}
