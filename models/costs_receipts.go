// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CostsReceipt is an object representing the database table.
type CostsReceipt struct {
	ID        int  `form:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PaymentID int  `form:"payment_id" boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	ImageID   int  `form:"image_id" boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`
	Active    bool `form:"active" boil:"active" json:"active" toml:"active" yaml:"active"`

	R *costsReceiptR `form:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L costsReceiptL  `form:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CostsReceiptColumns = struct {
	ID        string
	PaymentID string
	ImageID   string
	Active    string
}{
	ID:        "id",
	PaymentID: "payment_id",
	ImageID:   "image_id",
	Active:    "active",
}

var CostsReceiptTableColumns = struct {
	ID        string
	PaymentID string
	ImageID   string
	Active    string
}{
	ID:        "costs_receipts.id",
	PaymentID: "costs_receipts.payment_id",
	ImageID:   "costs_receipts.image_id",
	Active:    "costs_receipts.active",
}

// Generated where

var CostsReceiptWhere = struct {
	ID        whereHelperint
	PaymentID whereHelperint
	ImageID   whereHelperint
	Active    whereHelperbool
}{
	ID:        whereHelperint{field: "`costs_receipts`.`id`"},
	PaymentID: whereHelperint{field: "`costs_receipts`.`payment_id`"},
	ImageID:   whereHelperint{field: "`costs_receipts`.`image_id`"},
	Active:    whereHelperbool{field: "`costs_receipts`.`active`"},
}

// CostsReceiptRels is where relationship names are stored.
var CostsReceiptRels = struct {
	Image   string
	Payment string
}{
	Image:   "Image",
	Payment: "Payment",
}

// costsReceiptR is where relationships are stored.
type costsReceiptR struct {
	Image   *Image   `form:"Image" boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	Payment *Payment `form:"Payment" boil:"Payment" json:"Payment" toml:"Payment" yaml:"Payment"`
}

// NewStruct creates a new relationship struct
func (*costsReceiptR) NewStruct() *costsReceiptR {
	return &costsReceiptR{}
}

// costsReceiptL is where Load methods for each relationship are stored.
type costsReceiptL struct{}

var (
	costsReceiptAllColumns            = []string{"id", "payment_id", "image_id", "active"}
	costsReceiptColumnsWithoutDefault = []string{"payment_id", "image_id"}
	costsReceiptColumnsWithDefault    = []string{"id", "active"}
	costsReceiptPrimaryKeyColumns     = []string{"id"}
)

type (
	// CostsReceiptSlice is an alias for a slice of pointers to CostsReceipt.
	// This should almost always be used instead of []CostsReceipt.
	CostsReceiptSlice []*CostsReceipt
	// CostsReceiptHook is the signature for custom CostsReceipt hook methods
	CostsReceiptHook func(context.Context, boil.ContextExecutor, *CostsReceipt) error

	costsReceiptQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	costsReceiptType                 = reflect.TypeOf(&CostsReceipt{})
	costsReceiptMapping              = queries.MakeStructMapping(costsReceiptType)
	costsReceiptPrimaryKeyMapping, _ = queries.BindMapping(costsReceiptType, costsReceiptMapping, costsReceiptPrimaryKeyColumns)
	costsReceiptInsertCacheMut       sync.RWMutex
	costsReceiptInsertCache          = make(map[string]insertCache)
	costsReceiptUpdateCacheMut       sync.RWMutex
	costsReceiptUpdateCache          = make(map[string]updateCache)
	costsReceiptUpsertCacheMut       sync.RWMutex
	costsReceiptUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var costsReceiptBeforeInsertHooks []CostsReceiptHook
var costsReceiptBeforeUpdateHooks []CostsReceiptHook
var costsReceiptBeforeDeleteHooks []CostsReceiptHook
var costsReceiptBeforeUpsertHooks []CostsReceiptHook

var costsReceiptAfterInsertHooks []CostsReceiptHook
var costsReceiptAfterSelectHooks []CostsReceiptHook
var costsReceiptAfterUpdateHooks []CostsReceiptHook
var costsReceiptAfterDeleteHooks []CostsReceiptHook
var costsReceiptAfterUpsertHooks []CostsReceiptHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CostsReceipt) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CostsReceipt) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CostsReceipt) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CostsReceipt) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CostsReceipt) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CostsReceipt) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CostsReceipt) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CostsReceipt) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CostsReceipt) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range costsReceiptAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCostsReceiptHook registers your hook function for all future operations.
func AddCostsReceiptHook(hookPoint boil.HookPoint, costsReceiptHook CostsReceiptHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		costsReceiptBeforeInsertHooks = append(costsReceiptBeforeInsertHooks, costsReceiptHook)
	case boil.BeforeUpdateHook:
		costsReceiptBeforeUpdateHooks = append(costsReceiptBeforeUpdateHooks, costsReceiptHook)
	case boil.BeforeDeleteHook:
		costsReceiptBeforeDeleteHooks = append(costsReceiptBeforeDeleteHooks, costsReceiptHook)
	case boil.BeforeUpsertHook:
		costsReceiptBeforeUpsertHooks = append(costsReceiptBeforeUpsertHooks, costsReceiptHook)
	case boil.AfterInsertHook:
		costsReceiptAfterInsertHooks = append(costsReceiptAfterInsertHooks, costsReceiptHook)
	case boil.AfterSelectHook:
		costsReceiptAfterSelectHooks = append(costsReceiptAfterSelectHooks, costsReceiptHook)
	case boil.AfterUpdateHook:
		costsReceiptAfterUpdateHooks = append(costsReceiptAfterUpdateHooks, costsReceiptHook)
	case boil.AfterDeleteHook:
		costsReceiptAfterDeleteHooks = append(costsReceiptAfterDeleteHooks, costsReceiptHook)
	case boil.AfterUpsertHook:
		costsReceiptAfterUpsertHooks = append(costsReceiptAfterUpsertHooks, costsReceiptHook)
	}
}

// One returns a single costsReceipt record from the query.
func (q costsReceiptQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CostsReceipt, error) {
	o := &CostsReceipt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for costs_receipts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CostsReceipt records from the query.
func (q costsReceiptQuery) All(ctx context.Context, exec boil.ContextExecutor) (CostsReceiptSlice, error) {
	var o []*CostsReceipt

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CostsReceipt slice")
	}

	if len(costsReceiptAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CostsReceipt records in the query.
func (q costsReceiptQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count costs_receipts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q costsReceiptQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if costs_receipts exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *CostsReceipt) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	query := Images(queryMods...)
	queries.SetFrom(query.Query, "`images`")

	return query
}

// Payment pointed to by the foreign key.
func (o *CostsReceipt) Payment(mods ...qm.QueryMod) paymentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := Payments(queryMods...)
	queries.SetFrom(query.Query, "`payments`")

	return query
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (costsReceiptL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCostsReceipt interface{}, mods queries.Applicator) error {
	var slice []*CostsReceipt
	var object *CostsReceipt

	if singular {
		object = maybeCostsReceipt.(*CostsReceipt)
	} else {
		slice = *maybeCostsReceipt.(*[]*CostsReceipt)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &costsReceiptR{}
		}
		args = append(args, object.ImageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &costsReceiptR{}
			}

			for _, a := range args {
				if a == obj.ImageID {
					continue Outer
				}
			}

			args = append(args, obj.ImageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(costsReceiptAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.CostsReceipts = append(foreign.R.CostsReceipts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImageID == foreign.ID {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.CostsReceipts = append(foreign.R.CostsReceipts, local)
				break
			}
		}
	}

	return nil
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (costsReceiptL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCostsReceipt interface{}, mods queries.Applicator) error {
	var slice []*CostsReceipt
	var object *CostsReceipt

	if singular {
		object = maybeCostsReceipt.(*CostsReceipt)
	} else {
		slice = *maybeCostsReceipt.(*[]*CostsReceipt)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &costsReceiptR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &costsReceiptR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(costsReceiptAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentR{}
		}
		foreign.R.CostsReceipts = append(foreign.R.CostsReceipts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.ID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.CostsReceipts = append(foreign.R.CostsReceipts, local)
				break
			}
		}
	}

	return nil
}

// SetImage of the costsReceipt to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.CostsReceipts.
func (o *CostsReceipt) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `costs_receipts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"image_id"}),
		strmangle.WhereClause("`", "`", 0, costsReceiptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImageID = related.ID
	if o.R == nil {
		o.R = &costsReceiptR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			CostsReceipts: CostsReceiptSlice{o},
		}
	} else {
		related.R.CostsReceipts = append(related.R.CostsReceipts, o)
	}

	return nil
}

// SetPayment of the costsReceipt to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.CostsReceipts.
func (o *CostsReceipt) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `costs_receipts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, costsReceiptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.ID
	if o.R == nil {
		o.R = &costsReceiptR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentR{
			CostsReceipts: CostsReceiptSlice{o},
		}
	} else {
		related.R.CostsReceipts = append(related.R.CostsReceipts, o)
	}

	return nil
}

// CostsReceipts retrieves all the records using an executor.
func CostsReceipts(mods ...qm.QueryMod) costsReceiptQuery {
	mods = append(mods, qm.From("`costs_receipts`"))
	return costsReceiptQuery{NewQuery(mods...)}
}

// FindCostsReceipt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCostsReceipt(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CostsReceipt, error) {
	costsReceiptObj := &CostsReceipt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `costs_receipts` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, costsReceiptObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from costs_receipts")
	}

	if err = costsReceiptObj.doAfterSelectHooks(ctx, exec); err != nil {
		return costsReceiptObj, err
	}

	return costsReceiptObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CostsReceipt) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no costs_receipts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(costsReceiptColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	costsReceiptInsertCacheMut.RLock()
	cache, cached := costsReceiptInsertCache[key]
	costsReceiptInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			costsReceiptAllColumns,
			costsReceiptColumnsWithDefault,
			costsReceiptColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(costsReceiptType, costsReceiptMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(costsReceiptType, costsReceiptMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `costs_receipts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `costs_receipts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `costs_receipts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, costsReceiptPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into costs_receipts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == costsReceiptMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for costs_receipts")
	}

CacheNoHooks:
	if !cached {
		costsReceiptInsertCacheMut.Lock()
		costsReceiptInsertCache[key] = cache
		costsReceiptInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CostsReceipt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CostsReceipt) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	costsReceiptUpdateCacheMut.RLock()
	cache, cached := costsReceiptUpdateCache[key]
	costsReceiptUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			costsReceiptAllColumns,
			costsReceiptPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update costs_receipts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `costs_receipts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, costsReceiptPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(costsReceiptType, costsReceiptMapping, append(wl, costsReceiptPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update costs_receipts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for costs_receipts")
	}

	if !cached {
		costsReceiptUpdateCacheMut.Lock()
		costsReceiptUpdateCache[key] = cache
		costsReceiptUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q costsReceiptQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for costs_receipts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for costs_receipts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CostsReceiptSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), costsReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `costs_receipts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, costsReceiptPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in costsReceipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all costsReceipt")
	}
	return rowsAff, nil
}

var mySQLCostsReceiptUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CostsReceipt) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no costs_receipts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(costsReceiptColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCostsReceiptUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	costsReceiptUpsertCacheMut.RLock()
	cache, cached := costsReceiptUpsertCache[key]
	costsReceiptUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			costsReceiptAllColumns,
			costsReceiptColumnsWithDefault,
			costsReceiptColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			costsReceiptAllColumns,
			costsReceiptPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert costs_receipts, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`costs_receipts`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `costs_receipts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(costsReceiptType, costsReceiptMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(costsReceiptType, costsReceiptMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for costs_receipts")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == costsReceiptMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(costsReceiptType, costsReceiptMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for costs_receipts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for costs_receipts")
	}

CacheNoHooks:
	if !cached {
		costsReceiptUpsertCacheMut.Lock()
		costsReceiptUpsertCache[key] = cache
		costsReceiptUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CostsReceipt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CostsReceipt) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CostsReceipt provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), costsReceiptPrimaryKeyMapping)
	sql := "DELETE FROM `costs_receipts` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from costs_receipts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for costs_receipts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q costsReceiptQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no costsReceiptQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from costs_receipts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for costs_receipts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CostsReceiptSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(costsReceiptBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), costsReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `costs_receipts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, costsReceiptPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from costsReceipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for costs_receipts")
	}

	if len(costsReceiptAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CostsReceipt) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCostsReceipt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CostsReceiptSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CostsReceiptSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), costsReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `costs_receipts`.* FROM `costs_receipts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, costsReceiptPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CostsReceiptSlice")
	}

	*o = slice

	return nil
}

// CostsReceiptExists checks if the CostsReceipt row exists.
func CostsReceiptExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `costs_receipts` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if costs_receipts exists")
	}

	return exists, nil
}
