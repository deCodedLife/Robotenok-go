// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Course is an object representing the database table.
type Course struct {
	ID      int       `form:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Active  null.Bool `form:"active" boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	Name    string    `form:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Payment int16     `form:"payment" boil:"payment" json:"payment" toml:"payment" yaml:"payment"`
	Lessons int8      `form:"lessons" boil:"lessons" json:"lessons" toml:"lessons" yaml:"lessons"`
	Image   null.Int  `form:"image" boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`

	R *courseR `form:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L courseL  `form:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CourseColumns = struct {
	ID      string
	Active  string
	Name    string
	Payment string
	Lessons string
	Image   string
}{
	ID:      "id",
	Active:  "active",
	Name:    "name",
	Payment: "payment",
	Lessons: "lessons",
	Image:   "image",
}

var CourseTableColumns = struct {
	ID      string
	Active  string
	Name    string
	Payment string
	Lessons string
	Image   string
}{
	ID:      "courses.id",
	Active:  "courses.active",
	Name:    "courses.name",
	Payment: "courses.payment",
	Lessons: "courses.lessons",
	Image:   "courses.image",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint8 struct{ field string }

func (w whereHelperint8) EQ(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint8) NEQ(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint8) LT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint8) LTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint8) GT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint8) GTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint8) IN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint8) NIN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CourseWhere = struct {
	ID      whereHelperint
	Active  whereHelpernull_Bool
	Name    whereHelperstring
	Payment whereHelperint16
	Lessons whereHelperint8
	Image   whereHelpernull_Int
}{
	ID:      whereHelperint{field: "`courses`.`id`"},
	Active:  whereHelpernull_Bool{field: "`courses`.`active`"},
	Name:    whereHelperstring{field: "`courses`.`name`"},
	Payment: whereHelperint16{field: "`courses`.`payment`"},
	Lessons: whereHelperint8{field: "`courses`.`lessons`"},
	Image:   whereHelpernull_Int{field: "`courses`.`image`"},
}

// CourseRels is where relationship names are stored.
var CourseRels = struct {
	CourseImage  string
	CourseGroups string
	Payments     string
}{
	CourseImage:  "CourseImage",
	CourseGroups: "CourseGroups",
	Payments:     "Payments",
}

// courseR is where relationships are stored.
type courseR struct {
	CourseImage  *Image           `form:"CourseImage" boil:"CourseImage" json:"CourseImage" toml:"CourseImage" yaml:"CourseImage"`
	CourseGroups CourseGroupSlice `form:"CourseGroups" boil:"CourseGroups" json:"CourseGroups" toml:"CourseGroups" yaml:"CourseGroups"`
	Payments     PaymentSlice     `form:"Payments" boil:"Payments" json:"Payments" toml:"Payments" yaml:"Payments"`
}

// NewStruct creates a new relationship struct
func (*courseR) NewStruct() *courseR {
	return &courseR{}
}

// courseL is where Load methods for each relationship are stored.
type courseL struct{}

var (
	courseAllColumns            = []string{"id", "active", "name", "payment", "lessons", "image"}
	courseColumnsWithoutDefault = []string{"name", "payment", "lessons", "image"}
	courseColumnsWithDefault    = []string{"id", "active"}
	coursePrimaryKeyColumns     = []string{"id"}
)

type (
	// CourseSlice is an alias for a slice of pointers to Course.
	// This should almost always be used instead of []Course.
	CourseSlice []*Course
	// CourseHook is the signature for custom Course hook methods
	CourseHook func(context.Context, boil.ContextExecutor, *Course) error

	courseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	courseType                 = reflect.TypeOf(&Course{})
	courseMapping              = queries.MakeStructMapping(courseType)
	coursePrimaryKeyMapping, _ = queries.BindMapping(courseType, courseMapping, coursePrimaryKeyColumns)
	courseInsertCacheMut       sync.RWMutex
	courseInsertCache          = make(map[string]insertCache)
	courseUpdateCacheMut       sync.RWMutex
	courseUpdateCache          = make(map[string]updateCache)
	courseUpsertCacheMut       sync.RWMutex
	courseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var courseBeforeInsertHooks []CourseHook
var courseBeforeUpdateHooks []CourseHook
var courseBeforeDeleteHooks []CourseHook
var courseBeforeUpsertHooks []CourseHook

var courseAfterInsertHooks []CourseHook
var courseAfterSelectHooks []CourseHook
var courseAfterUpdateHooks []CourseHook
var courseAfterDeleteHooks []CourseHook
var courseAfterUpsertHooks []CourseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Course) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Course) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Course) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Course) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Course) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Course) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Course) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Course) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Course) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCourseHook registers your hook function for all future operations.
func AddCourseHook(hookPoint boil.HookPoint, courseHook CourseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		courseBeforeInsertHooks = append(courseBeforeInsertHooks, courseHook)
	case boil.BeforeUpdateHook:
		courseBeforeUpdateHooks = append(courseBeforeUpdateHooks, courseHook)
	case boil.BeforeDeleteHook:
		courseBeforeDeleteHooks = append(courseBeforeDeleteHooks, courseHook)
	case boil.BeforeUpsertHook:
		courseBeforeUpsertHooks = append(courseBeforeUpsertHooks, courseHook)
	case boil.AfterInsertHook:
		courseAfterInsertHooks = append(courseAfterInsertHooks, courseHook)
	case boil.AfterSelectHook:
		courseAfterSelectHooks = append(courseAfterSelectHooks, courseHook)
	case boil.AfterUpdateHook:
		courseAfterUpdateHooks = append(courseAfterUpdateHooks, courseHook)
	case boil.AfterDeleteHook:
		courseAfterDeleteHooks = append(courseAfterDeleteHooks, courseHook)
	case boil.AfterUpsertHook:
		courseAfterUpsertHooks = append(courseAfterUpsertHooks, courseHook)
	}
}

// One returns a single course record from the query.
func (q courseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Course, error) {
	o := &Course{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for courses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Course records from the query.
func (q courseQuery) All(ctx context.Context, exec boil.ContextExecutor) (CourseSlice, error) {
	var o []*Course

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Course slice")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Course records in the query.
func (q courseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count courses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q courseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if courses exists")
	}

	return count > 0, nil
}

// CourseImage pointed to by the foreign key.
func (o *Course) CourseImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.Image),
	}

	queryMods = append(queryMods, mods...)

	query := Images(queryMods...)
	queries.SetFrom(query.Query, "`images`")

	return query
}

// CourseGroups retrieves all the course_group's CourseGroups with an executor.
func (o *Course) CourseGroups(mods ...qm.QueryMod) courseGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`course_groups`.`course_id`=?", o.ID),
	)

	query := CourseGroups(queryMods...)
	queries.SetFrom(query.Query, "`course_groups`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`course_groups`.*"})
	}

	return query
}

// Payments retrieves all the payment's Payments with an executor.
func (o *Course) Payments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`payments`.`course_id`=?", o.ID),
	)

	query := Payments(queryMods...)
	queries.SetFrom(query.Query, "`payments`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`payments`.*"})
	}

	return query
}

// LoadCourseImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (courseL) LoadCourseImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		if !queries.IsNil(object.Image) {
			args = append(args, object.Image)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Image) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Image) {
				args = append(args, obj.Image)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CourseImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.Courses = append(foreign.R.Courses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Image, foreign.ID) {
				local.R.CourseImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Courses = append(foreign.R.Courses, local)
				break
			}
		}
	}

	return nil
}

// LoadCourseGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadCourseGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course_groups`),
		qm.WhereIn(`course_groups.course_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load course_groups")
	}

	var resultSlice []*CourseGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice course_groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on course_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course_groups")
	}

	if len(courseGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CourseGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &courseGroupR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.CourseGroups = append(local.R.CourseGroups, foreign)
				if foreign.R == nil {
					foreign.R = &courseGroupR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.course_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.Payments = append(local.R.Payments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// SetCourseImage of the course to the related item.
// Sets o.R.CourseImage to related.
// Adds o to related.R.Courses.
func (o *Course) SetCourseImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `courses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"image"}),
		strmangle.WhereClause("`", "`", 0, coursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Image, related.ID)
	if o.R == nil {
		o.R = &courseR{
			CourseImage: related,
		}
	} else {
		o.R.CourseImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			Courses: CourseSlice{o},
		}
	} else {
		related.R.Courses = append(related.R.Courses, o)
	}

	return nil
}

// RemoveCourseImage relationship.
// Sets o.R.CourseImage to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Course) RemoveCourseImage(ctx context.Context, exec boil.ContextExecutor, related *Image) error {
	var err error

	queries.SetScanner(&o.Image, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CourseImage = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Courses {
		if queries.Equal(o.Image, ri.Image) {
			continue
		}

		ln := len(related.R.Courses)
		if ln > 1 && i < ln-1 {
			related.R.Courses[i] = related.R.Courses[ln-1]
		}
		related.R.Courses = related.R.Courses[:ln-1]
		break
	}
	return nil
}

// AddCourseGroups adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.CourseGroups.
// Sets related.R.Course appropriately.
func (o *Course) AddCourseGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CourseGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `course_groups` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, courseGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			CourseGroups: related,
		}
	} else {
		o.R.CourseGroups = append(o.R.CourseGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &courseGroupR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddPayments adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Course appropriately.
func (o *Course) AddPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `payments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// Courses retrieves all the records using an executor.
func Courses(mods ...qm.QueryMod) courseQuery {
	mods = append(mods, qm.From("`courses`"))
	return courseQuery{NewQuery(mods...)}
}

// FindCourse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCourse(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Course, error) {
	courseObj := &Course{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `courses` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, courseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from courses")
	}

	if err = courseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return courseObj, err
	}

	return courseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Course) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no courses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	courseInsertCacheMut.RLock()
	cache, cached := courseInsertCache[key]
	courseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			courseAllColumns,
			courseColumnsWithDefault,
			courseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(courseType, courseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `courses` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `courses` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `courses` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, coursePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into courses")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == courseMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for courses")
	}

CacheNoHooks:
	if !cached {
		courseInsertCacheMut.Lock()
		courseInsertCache[key] = cache
		courseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Course.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Course) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	courseUpdateCacheMut.RLock()
	cache, cached := courseUpdateCache[key]
	courseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			courseAllColumns,
			coursePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update courses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `courses` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, coursePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, append(wl, coursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update courses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for courses")
	}

	if !cached {
		courseUpdateCacheMut.Lock()
		courseUpdateCache[key] = cache
		courseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q courseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for courses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CourseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `courses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, coursePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in course slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all course")
	}
	return rowsAff, nil
}

var mySQLCourseUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Course) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no courses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCourseUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	courseUpsertCacheMut.RLock()
	cache, cached := courseUpsertCache[key]
	courseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			courseAllColumns,
			courseColumnsWithDefault,
			courseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			courseAllColumns,
			coursePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert courses, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`courses`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `courses` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(courseType, courseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for courses")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == courseMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(courseType, courseMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for courses")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for courses")
	}

CacheNoHooks:
	if !cached {
		courseUpsertCacheMut.Lock()
		courseUpsertCache[key] = cache
		courseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Course record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Course) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Course provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), coursePrimaryKeyMapping)
	sql := "DELETE FROM `courses` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for courses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q courseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no courseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for courses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CourseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(courseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `courses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, coursePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from course slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for courses")
	}

	if len(courseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Course) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCourse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CourseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CourseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `courses`.* FROM `courses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, coursePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CourseSlice")
	}

	*o = slice

	return nil
}

// CourseExists checks if the Course row exists.
func CourseExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `courses` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if courses exists")
	}

	return exists, nil
}
